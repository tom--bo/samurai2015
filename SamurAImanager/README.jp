SamurAI 3x3 ゲーム管理システム (2015-11-24)

このディレクトリには SamurAI 3x3 のゲーム管理システムのソースコードと
設定例、および、プレイヤの例が入っています。

1. 問題の報告と改良の要請

何かシステムの問題を見つけたら、以下宛に電子メールで報告してください。
	 mailto:samurai2015-contact@ipsj.or.jp
システムについての改良の要請も同様におねがいします。

2. インストール

システムは C++ で記述し、C++11 標準に合うようにしてあるはずです。多く
のシステムでは単に "make all" を実行するだけで良いだろうと思いますが、
場合によってはサブディレクトリ "manager" や "players" の中の Makefile
の最初の数行を修正する必要があるかもしれません。

システムのテストは Linux とg++ 4.9.2 版でしか行っていませんので、他の
システムではうまく動作しないかもしれません。他の環境でも動作した・動作
しなかったといったご報告をいただければ幸いです。

3. ゲーム管理システム

ゲーム管理システムはサブディレクトリ "manager" にあります。インストー
ルすると "gameManager" という名前の実行形式ファイルがこのディレクトリ
にできるはずです。これがゲーム管理システムのメインプログラムです。

4. システムの動かし方

ゲーム管理システムは標準入力からゲーム設定情報を読み込んで、標準出力に
ゲームのログを書き出します。ゲームのログは別の visualizer プログラムで
グラフィカルに見ることができます。

設定例のファイルはサブディレクトリ"setting" の中にあります。お使いの環
境に合わせていくらか修正する必要があるかもしれません。詳しくはサブディ
レクトリ "setting" の中の "README"ファイルをお読みください。

システムを起動するコマンドは以下のようなものです。
   # manager/gameManager <setting/setting >logfile

ゲーム管理システムにはいくつかのオプションがあります。

  -h: ヘルプ
  -a<path>: プレイヤの AI へのメッセージのログをファイルに出力します。
　　N 番目のプレイヤへのメッセージは <path> と N とをつなげたファイル
  　名前のファイルに出力されます。
  　たとば、"-ainput" と指定すれば、"input0" から "input5" までのファ
  　イルができます。
  　このオプションは、AI プログラムのデバッグに使えます。
  　ゲーム管理システムをこのオプションをつけて動かした後、
　　あなたの AI プログラムにメッセージのログを標準入力として与えれば、
　　そのプログラムだけをデバッグすることができます。
  -d: ゲームの進行状況をダンプします。
　　これは主としてゲーム管理システムのデバッグのためのものです。
  -D<path>: ゲームの進行状況を指定ファイルにダンプします。
  -r: game result report output
    Currently this option is not supported.
    This option is planned to be used when the game system is
    run as a part of tournament management system.

5. プレイヤの例

プレイヤはそれぞれ独立したプログラムで、ゲーム管理システムから起動され
ます。サブディレクトリ "players" の中に、いくつかのプレイヤの例があります。

  randomPlayer: ランダムに行動を決める。
  greedyPlayer: 浅い探索に基づいて、できるだけ多くのセクションを占領し
  　ようとする。

これらのプレイヤ、ことに greedyPlayer は、新しいプレイヤを作るときの出
発点として役立つでしょう。そのソースコード "greedyPlayer.cpp" を見ると
驚くかもしれません。これは定数を4つ定義しているだけです。

メインプログラムといくつかの関数は "players.cpp" に定義してあり、すべ
てのプレイヤ例はこれを共通に使っています。クラス "Player" のオブジェク
トがサムライの行動を決める役割を追っています。それぞれのプレイヤ例は、
それぞれがこのクラス "Player" の子クラスを定義しています。

探索のコードは "planning.cpp" にあり、ここでクラス "Player" の子クラス
であるクラス "PlanningPlayer" を定義しています。この "PlanningPlayer"
は、ある評価関数の値を最大化しようとしますが、"greedyPlayer.cpp" に定
義してある定数は、このさまざまな要素の重みを決めているのです。この重み
を変えればちょっと違う行動を取るプレイヤを簡単に作ることができます。た
とえば、"hurtingMerits" を大きくすれば、できるだけ敵のサムライがいるセ
クションを占領するようにするでしょう。また、"hidingMerits" を大きくす
れば、できるだけ身を隠そうとするようになるでしょう。

他にもいくつかプレイヤ例がありますが、これらは主に振る舞いのおかしなプ
レイヤに対するゲーム管理システムの対処をデバッグするだめのものです。

  timeoutPlayer: 反応が遅い。
  tooActivePlayer: 指示する行動が多すぎる。
  nonCheckingPlayer: ときどき変な行動を指示する。
